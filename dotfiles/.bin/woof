#!/usr/bin/env python3
# WOOF (Web Offer One File)

"""woof -- an ad-hoc single file webserver.

Copyright (C) 2004-2009 Simon Budig  <simon@budig.de>.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

A copy of the GNU General Public License is available at
http://www.fsf.org/licenses/gpl.txt, you can also write to the
Free Software  Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.

Darwin support with the help from Mat Caughron, <mat@phpconsulting.com>
Solaris support by Colin Marquardt, <colin.marquardt@zmd.de>
FreeBSD support with the help from Andy Gimblett, <A.M.Gimblett@swansea.ac.uk>
Cygwin support by Stefan Reich√∂r <stefan@xsteve.at>
tarfile usage suggested by Morgan Lefieux <comete@geekandfree.org>
File upload support loosely based on code from Stephen English
<steve@secomputing.co.uk>

http://www.home.unix-ag.org/simon/woof.html
"""

from __future__ import annotations

import contextlib
import errno
import getopt
import os
import readline
import shutil
import socket
import sys
import tarfile
import tempfile
import traceback
import urllib
import urllib.request
import zipfile
from configparser import ConfigParser
from email.parser import BytesParser
from http.server import BaseHTTPRequestHandler, HTTPServer
from io import BytesIO, StringIO
from typing import TYPE_CHECKING, BinaryIO
from urllib.parse import quote, unquote, urlparse

if TYPE_CHECKING:
    import email
    from collections.abc import Generator

MAX_DOWNLOADS = 1
CPID = -1
COMPRESSED = "gz"
UPLOAD = False


def get_traceback() -> str:
    """Get active exception trace back."""
    # Get values from exc_info
    ex_class, ex_text, ex_traceback = sys.exc_info()
    with StringIO() as yes_totaly_a_file:
        traceback.print_exception(
            None,  # Ignored since python 3.5
            value=ex_text,
            tb=ex_traceback,
            limit=None,
            file=yes_totaly_a_file,
            chain=True,
        )
        return yes_totaly_a_file.getvalue()[:-1]


# Utility function to guess the IP (as a string) where the server can be
# reached from the outside. Quite nasty problem actually.


def find_ip() -> str:
    """Guess the IP where the server can be found from the network."""
    # we get a UDP-socket for the TEST-networks reserved by IANA.
    # It is highly unlikely, that there is special routing used
    # for these networks, hence the socket later should give us
    # the IP address of the default route.
    # We're doing multiple tests, to guard against the computer being
    # part of a test installation.

    candidates: list[str] = []
    for test_ip in ("192.0.2.0", "198.51.100.0", "203.0.113.0"):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.connect((test_ip, 80))
        ip_addr: str = sock.getsockname()[0]
        sock.close()
        if ip_addr in candidates:
            return ip_addr
        candidates.append(ip_addr)

    return candidates[0]


def decode_multipart_form_data(
    multipart_data: BinaryIO,
    headers: email.message.Message,
) -> list[tuple[dict[str, str], bytes]]:
    """Decode multipart form data."""
    content_type = headers["Content-Type"].encode("ascii")
    content_len = int(headers["Content-Length"])
    data = multipart_data.read(content_len)

    content = b"Content-Type: %b\r\n%b" % (content_type, data)

    parsed = BytesParser().parsebytes(content)

    results = []
    for part in parsed.get_payload():
        params = part.get_params(header="content-disposition")
        payload: bytes = part.get_payload(decode=True)
        result = dict(params), payload
        results.append(result)
    return results


# our own HTTP server class, fixing up a change in python 2.7
# since we do our fork() in the request handler
# the server must not shutdown() the socket.


class ForkingHTTPServer(HTTPServer):
    """Fix a change from Python 2.7 involving shutting down the socket after a fork."""

    __slots__ = ()

    def process_request(
        self,
        request: socket.socket | tuple[bytes, socket.socket],
        client_address: str,
    ) -> None:
        """Finish and close request."""
        self.finish_request(request, client_address)
        self.close_request(request)


def suffix_gen() -> Generator[str, None, None]:
    """Yield filename suffixes."""
    yield ""
    i = 1
    while True:
        yield f".{i}"
        i += 1


# Main class implementing an HTTP-Requesthandler, that serves just a single
# file and redirects all other requests to this file (this passes the actual
# filename to the client).
# Currently it is impossible to serve different files with different
# instances of this class.


class FileServHTTPRequestHandler(BaseHTTPRequestHandler):
    """Simon's FileServer using HTTP/1.0 protocol."""

    server_version = "Simons FileServer"
    protocol_version = "HTTP/1.0"

    filename: str = "."
    path: str = ""

    def log_request(
        self,
        code: int | str = "-",
        size: int | str = "-",
    ) -> None:
        """Log a request sent to the server."""
        if code == 200:
            super().log_request(code, size)

    def do_POST(self) -> None:  # noqa: N802
        """Handle POST method on the web page."""
        global MAX_DOWNLOADS

        if not UPLOAD:
            self.send_error(501, "Unsupported method (POST)")
            return

        multi_form = decode_multipart_form_data(self.rfile, self.headers)

        no_content = True
        for form_dict, content in multi_form:  # noqa: B007
            if form_dict.get("name") == "upfile":
                no_content = False
                break
        if no_content:
            # Went through without break, did not find
            self.send_error(403, "No upload provided")
            return

        if not content or not form_dict.get("filename"):
            self.send_error(403, "No upload provided")
            return

        upfilename = form_dict["filename"]

        if "\\" in upfilename:
            upfilename = upfilename.rsplit("\\", 1)[-1]

        upfilename = os.path.basename(upfilename)

        destfile = None
        for suffix in suffix_gen():
            destfilename = os.path.join(".", upfilename + suffix)
            try:
                destfile = os.open(
                    destfilename,
                    os.O_WRONLY | os.O_CREAT | os.O_EXCL,
                    0o644,
                )
                break
            except OSError as ex:
                if ex.errno == errno.EEXIST:
                    continue
                raise

        if not destfile:
            upfilename += "."
            destfile, destfilename = tempfile.mkstemp(
                prefix=upfilename,
                dir=".",
            )

        print(
            f"Accepting uploaded file: {upfilename} and saving in current directory as {destfilename}",
        )

        with BytesIO(content) as readfile:
            with open(destfile, "wb") as writefile:
                shutil.copyfileobj(readfile, writefile)

        txt = b"""\
               <!DOCTYPE html>
               <html>
                 <head><title>Woof Upload</title></head>
                 <body>
                   <h1>Woof Upload complete</title></h1>
                   <p>Thanks a lot!</p>
                 </body>
               </html>
               """
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.send_header("Content-Length", str(len(txt)))
        self.end_headers()
        self.wfile.write(txt)

        MAX_DOWNLOADS -= 1

        return

    def do_GET(self) -> None:  # noqa: N802
        """Handle the GET method on the web page."""
        global MAX_DOWNLOADS, CPID

        # Form for uploading a file
        if UPLOAD:
            txt = b"""\
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <title>Woof Upload</title>
              </head>
              <body>
                <h1>Woof Upload</title></h1>
                <form name="upload" method="POST" enctype="multipart/form-data">
                  <p><input type="file" name="upfile" required></p>
                  <p><input type="submit" value="Upload!"></p>
                </form>
              </body>
            </html>"""

            self.send_response(200)
            self.send_header("Content-Type", "text/html")
            self.send_header("Content-Length", str(len(txt)))
            self.end_headers()
            self.wfile.write(txt)
            return

        # Redirect any request to the filename of the file to serve.
        # This hands over the filename to the client.

        self.path = quote(unquote(self.path))
        location = "/" + quote(os.path.basename(self.filename))
        if os.path.isdir(self.filename):
            if COMPRESSED == "gz":
                location += ".tar.gz"
            elif COMPRESSED == "bz2":
                location += ".tar.bz2"
            elif COMPRESSED == "zip":
                location += ".zip"
            else:
                location += ".tar"

        if self.path != location:
            txt = f"""\
                <!DOCTYPE html>
                <html>
                   <head>
                     <meta charset="utf-8" />
                     <title>302 Found</title>
                   </head>
                   <body>302 Found <a href="{location}">here</a>.</body>
                </html>\n""".encode(
                "ascii",
            )
            self.send_response(302)
            self.send_header("Location", location)
            self.send_header("Content-Type", "text/html")
            self.send_header("Content-Length", str(len(txt)))
            self.end_headers()
            self.wfile.write(txt)
            return

        MAX_DOWNLOADS -= 1

        # let a separate process handle the actual download, so that
        # multiple downloads can happen simultaneously.

        CPID = os.fork()

        if CPID == 0:
            # Child process
            uploadtype = None

            if os.path.isfile(self.filename):
                uploadtype = "file"
            elif os.path.isdir(self.filename):
                uploadtype = "dir"

            if not uploadtype:
                print(
                    "Can only serve files or directories. Aborting.",
                    file=sys.stderr,
                )
                sys.exit(1)

            self.send_response(200)
            self.send_header("Content-Type", "application/octet-stream")
            self.send_header(
                "Content-Disposition",
                f"attachment;filename={quote(location[1:])}",
            )
            if os.path.isfile(self.filename):
                self.send_header(
                    "Content-Length",
                    str(os.path.getsize(self.filename)),
                )
            self.end_headers()

            try:
                if uploadtype == "file":
                    with open(self.filename, "rb") as datafile:
                        shutil.copyfileobj(datafile, self.wfile)
                elif uploadtype == "dir":
                    if COMPRESSED == "zip":
                        with zipfile.ZipFile(
                            self.wfile,
                            "w",
                            zipfile.ZIP_DEFLATED,
                        ) as zfile:
                            stripoff = os.path.dirname(self.filename) + os.sep

                            for root, _dirs, files in os.walk(self.filename):
                                for file in files:
                                    filename = os.path.join(root, file)
                                    if filename[: len(stripoff)] != stripoff:
                                        raise RuntimeError(
                                            "Invalid filename assumptions, please report!",
                                        )
                                    zfile.write(
                                        filename,
                                        filename[len(stripoff) :],
                                    )
                            zfile.close()
                    else:
                        with tarfile.open(
                            mode=("w|" + COMPRESSED),
                            fileobj=self.wfile,
                        ) as tfile:
                            tfile.add(
                                self.filename,
                                arcname=os.path.basename(self.filename),
                            )
                            tfile.close()
                elif uploadtype == "stdin":
                    shutil.copyfileobj(sys.stdin, self.wfile)  # type: ignore[misc]
            except Exception as ex:
                print(ex)
                print(get_traceback(), file=sys.stderr)
                print("Connection broke. Aborting", file=sys.stderr)


def serve_files(
    filename: str = "",
    max_downloads: int = 1,
    ip_addr: str = "",
    port: int = 8080,
) -> None:
    """Serve the file given by filename."""
    global MAX_DOWNLOADS

    MAX_DOWNLOADS = max_downloads

    # We have to somehow push the filename of the file to serve to the
    # class handling the requests. This is an evil way to do this...

    FileServHTTPRequestHandler.filename = filename

    if not ip_addr:
        ip_addr = find_ip()

    try:
        httpd = ForkingHTTPServer((ip_addr, port), FileServHTTPRequestHandler)
    except OSError:
        print(
            f"Cannot bind to IP address '{ip_addr}' port {port}",
            file=sys.stderr,
        )
        sys.exit(1)

    if ip_addr:
        # Add more information about the address
        if filename:
            location = f"http://{ip_addr}:{httpd.server_port}/{quote(os.path.basename(filename))}"
            if os.path.isdir(filename):
                if COMPRESSED == "gz":
                    location += ".tar.gz"
                elif COMPRESSED == "bz2":
                    location += ".tar.bz2"
                elif COMPRESSED == "zip":
                    location += ".zip"
                else:
                    location += ".tar"
        else:
            location = f"http://{ip_addr}:{httpd.server_port}"

        print(f"Now serving on {location}")

    while CPID != 0 and MAX_DOWNLOADS > 0:
        httpd.handle_request()


def usage(
    default_port: int,
    default_max_downloads: int,
    error_message: object | None = None,
) -> None:
    """Print usage information and exit the program."""
    name = os.path.basename(sys.argv[0])
    print(
        f"""
    Usage: {name} [-i <ip_addr>] [-p <port>] [-c <count>] <file>
           {name} [-i <ip_addr>] [-p <port>] [-c <count>] [-z|-j|-Z|-u] <dir>
           {name} [-i <ip_addr>] [-p <port>] [-c <count>] -s
           {name} [-i <ip_addr>] [-p <port>] [-c <count>] -U
           {name} <url>
    Serves a single file <count> times via http on port <port> on IP
    address <ip_addr>.

    When a directory is specified, an tar archive gets served. By default
    it is gzip COMPRESSED. You can specify -z for gzip compression,
    -j for bzip2 compression, -Z for ZIP compression or -u for no compression.
    You can configure your default compression method in the configuration
    file described below.

    When -s is specified instead of a filename, {name} distributes itself.

    When -U is specified, woof provides an upload form, allowing file uploads.

    defaults: count = {default_max_downloads}, port = {default_port}

    If started with an url as an argument, woof acts as a client,
    downloading the file and saving it in the current directory.

    You can specify different defaults in two locations: /etc/woofrc
    and ~/.woofrc can be INI-style config files containing the default
    port and the default count. The file in the home directory takes
    precedence. The compression methods are "off", "gz", "bz2" or "zip".

    Sample file:

        [main]
        port = 8008
        count = 2
        ip = 127.0.0.1
        COMPRESSED = gz
    """,
    )

    if error_message:
        print(error_message, file=sys.stderr)
    sys.exit(1 if error_message else 0)


# Super simple web client
def woof_client(url: str) -> bool | None:
    """Super simple web client that saves the returned data from a URL to a file you select."""
    urlparts = urlparse(url, "http")
    if urlparts[0] not in ("http", "https") or urlparts[1] == "":
        return None

    fname: str | None = None

    file_request = urllib.request.urlopen(url)  # noqa: S310

    f_meta = file_request.info()
    disp = f_meta["Content-Disposition"]

    if disp:
        disp_parts = disp.split(";")

        if disp_parts[0].lower() == "attachment":
            for file in disp_parts[1:]:
                if file.lower().startswith("filename="):
                    fname = file.removeprefix("filename=")
                    break

    if fname is None:
        url = file_request.geturl()
        urlparts = urlparse(url)
        assert isinstance(urlparts[2], str)
        fname = urlparts[2]

    if not fname:
        fname = "woof-out.bin"

    assert isinstance(fname, str)
    filename: str = fname

    if filename:
        filename = unquote(filename)
        filename = os.path.basename(filename)

    readline.set_startup_hook(lambda: readline.insert_text(filename))
    filename = input("Enter target filename: ")
    readline.set_startup_hook(None)

    override = False

    destfile = None
    destfilename = os.path.join(".", filename)
    try:
        destfile = os.open(
            destfilename,
            os.O_WRONLY | os.O_CREAT | os.O_EXCL,
            0o644,
        )
    except OSError as ex:
        if ex.errno == errno.EEXIST:
            override = input("File exists. Overwrite (y/n)? ").lower() in (
                "y",
                "yes",
            )
        else:
            file_request.close()
            raise

    if destfile is None:
        if override:
            destfile = os.open(destfilename, os.O_WRONLY | os.O_CREAT, 0o644)
        else:
            for suffix in suffix_gen():
                destfilename = os.path.join(".", filename + suffix)
                try:
                    destfile = os.open(
                        destfilename,
                        os.O_WRONLY | os.O_CREAT | os.O_EXCL,
                        0o644,
                    )
                    break
                except OSError as ex:
                    if ex.errno == errno.EEXIST:
                        continue
                    file_request.close()
                    raise

            if not destfile:
                destfile, destfilename = tempfile.mkstemp(
                    prefix=filename + ".",
                    dir=".",
                )
            print(f"Alternate filename is: {destfilename}")

    print(
        f"Downloading file: {filename} and saving in current directory as {destfilename}",
    )

    with open(destfilename, "wb") as dest:
        shutil.copyfileobj(file_request, dest)
        dest.close()
    file_request.close()

    return True


def main() -> None:
    """Command line entry point."""
    global UPLOAD, COMPRESSED

    max_downloads = 1
    port = 8080
    ip_addr = ""

    config = ConfigParser()
    config.read(("/etc/woofrc", os.path.expanduser("~/.woofrc")))

    if config.has_option("main", "port"):
        port = config.getint("main", "port")

    if config.has_option("main", "count"):
        max_downloads = config.getint("main", "count")

    if config.has_option("main", "ip"):
        ip_addr = config.get("main", "ip")

    if config.has_option("main", "COMPRESSED"):
        formats = {
            "gz": "gz",
            "true": "gz",
            "bz": "bz2",
            "bz2": "bz2",
            "zip": "zip",
            "off": "",
            "false": "",
        }
        COMPRESSED = config.get("main", "COMPRESSED")
        COMPRESSED = formats.get(COMPRESSED, "gz")

    defaultport = port
    defaultmaxdown = max_downloads

    try:
        options, filenames = getopt.getopt(sys.argv[1:], "hUszjZui:c:p:")
    except getopt.GetoptError as desc:
        usage(defaultport, defaultmaxdown, desc)

    for option, val in options:
        if option == "-c":
            try:
                max_downloads = int(val)
                if max_downloads <= 0:
                    raise ValueError
            except ValueError:
                usage(
                    defaultport,
                    defaultmaxdown,
                    f"Invalid download count: {val}. "
                    "Please specify an integer >= 0.",
                )
        elif option == "-i":
            ip_addr = val
        elif option == "-p":
            try:
                port = int(val)
            except ValueError:
                usage(
                    defaultport,
                    defaultmaxdown,
                    f"Invalid port number: {val}. Please specify an integer",
                )
        elif option == "-s":
            filenames.append(__file__)
        elif option == "-h":
            usage(defaultport, defaultmaxdown)
        elif option == "-U":
            UPLOAD = True
        elif option == "-z":
            COMPRESSED = "gz"
        elif option == "-j":
            COMPRESSED = "bz2"
        elif option == "-Z":
            COMPRESSED = "zip"
        elif option == "-u":
            COMPRESSED = ""
        else:
            usage(defaultport, defaultmaxdown, f"Unknown option: {option}")

    if UPLOAD:
        if len(filenames) > 0:
            usage(
                defaultport,
                defaultmaxdown,
                "Conflicting usage: simultaneous up- and download not supported.",
            )
        filename = ""
    else:
        if len(filenames) == 1:
            if woof_client(filenames[0]) is not None:
                sys.exit(0)

            filename = os.path.abspath(filenames[0])

            if not os.path.exists(filename):
                usage(
                    defaultport,
                    defaultmaxdown,
                    f"{filename}: No such file or directory",
                )

            if not (os.path.isfile(filename) or os.path.isdir(filename)):
                usage(
                    defaultport,
                    defaultmaxdown,
                    f"{filename}: Neither file nor directory",
                )
        elif len(filenames) > 1:
            usage(
                defaultport,
                defaultmaxdown,
                "Can only serve single files/directories.",
            )
        else:
            usage(defaultport, defaultmaxdown, "No file supplied to serve.")

    serve_files(filename, max_downloads, ip_addr, port)

    # wait for child processes to terminate
    if CPID != 0:
        try:
            while True:
                os.wait()
        except OSError:
            pass


# If not imported as a module, run the main program
if __name__ == "__main__":
    with contextlib.suppress(KeyboardInterrupt):
        main()
