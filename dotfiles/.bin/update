#!/bin/bash
# Updates everything able to be updated
# Programmed by CoolCat467. Parts of code copied from Adam Davenport's Menu System. All rights reserved.

# VERSION 2.0.1

## VARIABLE SETUP ##
VArgz="False"
VFlagRegular=0
VFlagHomebrew=0
VFlagAptOnly=0
VUnum=1
VBrewState="NULL"
VSudoed="False"


## FUNCTIONS ###

function Udnum {
	VUnum=$(($VUnum + 1))
}

function AuthSudo {
	if [[ $VSudoed != "True" ]]; then
		echo
		echo "###############################################################"
		echo "One (or more) of the update programs requires root permissions."
		echo
		echo "Please authenticate with sudo to continue the update."
		sudo -v && VSudoed="True"
		echo "###############################################################"
	fi
}

function StartBrew {
	echo
	echo "$VUnum - Brew"
	if [[  $VSudoed != "True" ]]; then
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
		VBrewState=$(brew doctor)
	else
		VBrewState="'sudo brew' is bad, man. It could explode!"
	fi

	if [[ $VBrewState = "Your system is ready to brew." ]]; then
		brew missing
		brew update
		brew upgrade
		brew cleanup
	fi

	if [[ $VBrewState = "" ]]; then
		echo "Homebrew is not installed!"
		VBrewState="Your system is ready to brew." # Make it skip the doctor warning
	fi

	[[ $VSudoed = "True" ]] && VBrewState="Your system is ready to brew." # Make it skip the doctor warning


	if [[ $VBrewState != "Your system is ready to brew." ]]; then
		echo "There is a problem with homebrew."
		echo "Please run 'brew doctor' to see the problem."
	fi

	if [[ $VSudoed != "True" ]]; then
		echo "This is a programming error. This should never appear."
		echo "Error: Tried to run brew as root. Do not run AuthSudo function before StartBrew"
	fi
	Udnum
}

function StartRubyGems {
	AuthSudo
	echo
	echo "$VUnum - RubyGems"
	sudo gem install rubygems-update
	sudo update_rubygems
	#sudo gem update
	sudo gem update "$(sudo gem outdated | cut -d ' ' -f 1)"
	sudo gem update --system
	Udnum
}

function StartPython {
	echo
	echo "$VUnum - Python"
	python3.12 -m pip install --upgrade pip

	python3.12 -m pip check
	echo
	echo "Searching for outdated packages..."
	#pip list --format freeze | cut -d = -f 1 | xargs -n1 pip3 install --upgrade
	uv pip list --exclude-editable --format=json | python -c "import sys,json;print(' '.join(x['name'] for x in json.load(sys.stdin)))" | xargs uv pip install --upgrade --break-system-packages
	# python3 -m pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 python3 -m pip install --upgrade --upgrade-strategy eager
	# Voutdated=$(pipupdate python3.11)
	# if [ -n "$Voutdated" ]; then
	# 	echo "Outdated packages: ""$Voutdated"
	# 	echo "$Voutdated" | xargs -n1 python3.11 -m pip install --upgrade --upgrade-strategy eager
	# else
	# 	echo "No outdated packages"
	# fi
	# VCat=$(which pipupdate)
	# if [ $VCat != '' ]
	# then
	# 	echo ""
	# 	echo "Please wait..."
	# 	VCat=$(pipupdate)
	# 	[[ "$VCat" != "NOPACKAGES" ]] && [[ "$VCat" != "Requirement" ]] && $($VCat)
	# 	[[ "$VCat" = "NOPACKAGES" ]] && echo "All pip packages up to date."
	# else
	# 	pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | sudo xargs -n1 pip3 install --upgrade
	# fi
	Udnum
}

function updateCerts {
	AuthSudo
	echo
	echo "$VUnum - Update Certificates"
	sudo update-ca-certificates
	Udnum
}

function StartApt {
	AuthSudo
	echo
	echo "$VUnum - Apt"
	#set -xe
	sudo apt-get update
	sudo apt-get -y --show-progress dist-upgrade
	sudo apt-get -y --show-progress dselect-upgrade
	#sudo apt-get -y --show-progress upgrade
	sudo apt --fix-broken -y install
	echo
	echo "Cleaning up..."
	sudo apt-get clean
	sudo apt-get autoclean
	sudo apt-get purge
	sudo apt-get autoremove --show-progress
	sudo apt-get check
	Udnum
}

function StartRazz {
	echo
	echo "$VUnum - Computer"
	do-release-upgrade
	#sudo rpi-update
	Udnum
}

function startSnap {
	AuthSudo
	echo
	echo "$VUnum - Snap"
	sudo snap refresh
	Udnum
}

function menu {
	### WELCOME SCREEN ###
	clear
	echo "Welcome to the Update Screen!"
	echo
	echo "1. - Update All"
	echo "2. - Update None"
	echo "3. - Update Chosen"
	echo "4. - Update Essentils"
	echo
	echo -n "Please enter an option and press RETURN: "
	read input
	choose
}

function choose {
	### MENU INPUT ###

	# INPUT ERROR
	[[ $input != "1" ]] &&
		[[ $input != "2" ]] &&
			[[ $input != "3" ]] &&
				[[ $input != "4" ]] &&
					clear &&
					echo "Please enter the numeric value of the option." &&
					echo "(press RETURN to continue)" &&
					read &&
					menu
	# VALID INPUT
	[[ $input = "1" ]] && UpdatAll
	[[ $input = "2" ]] && doquit
	[[ $input = "3" ]] && ChooseUpdat
	[[ $input = "4" ]] && updates
}

function UpdatAll {
	clear
	echo "Beginning Update..."
	StartBrew
	StartPython
	StartApt
	startSnap
	StartRazz
	StartRubyGems
	quit
}

function doquit {
	clear
	echo "You should be sure to update regularly."
}

function updates {
	clear
	echo "Beginning Update..."
	StartApt
	startSnap
	StartRazz
	quit
}

function ChooseUpdat {
	clear
	######### Selection Screen ##########
	echo "Please enter y if the"
	echo "displayed item should"
	echo "be updated, and then"
	echo "press enter."
	echo
	echo -n "1 - Brew         - "
	read brw
	echo -n "2 - Python       - "
	read phy
	echo -n "3 - RubyGems     - "
	read gemz
	echo -n "4 - Apt          - "
	read appt
	echo -n "5 - Computer     - "
	read pie
	echo -n "6 - Snap         - "
	read snp
	echo -n "7 - Certificates - "
	read certs
	echo
	run
}

function run {
	######### If y, start ##########
	echo "Beginning Update..."
	[[ $brw   = "y" ]] && StartBrew
	[[ $phy   = "y" ]] && StartPython
	[[ $certs = "y" ]] && updateCerts
	[[ $appt  = "y" ]] && StartApt
	[[ $snp   = "y" ]] && startSnap
	[[ $pie   = "y" ]] && StartRazz
	[[ $gemz  = "y" ]] && StartRubyGems
	quit
}

function UpdateRegular {
	#phy=y
	appt=y
	snp=y
	run
}

function UpdateHomebrew {
	brw=y
	gemz=y
	run
}

function UpdateAptOnly {
	appt=y
	run
}

function UpdatePythonOnly {
	phy=y
	run
}

function DisplayOptions {
	echo "Usage:"
	echo "  update [-r, -b, -a, -h]"
	echo "    -r : Update Regular (Apt, Snap)"
	echo "    -b : Update Homebrew (Homebrew, RubyGems)"
	echo "    -a : Update Aptitude"
	echo "    -p : Update Python"
	echo "    -h : Display Options"
	echo
	echo "Created by CoolCat467"
}

function quit {
	echo
	echo "A reboot may be required to apply some changes."
	exit 0
}

function main {
	[[ $VFlagRegular  = "1" ]] && UpdateRegular
	[[ $VFlagHomebrew = "1" ]] && UpdateHomebrew
	[[ $VFlagAptOnly  = "1" ]] && UpdateAptOnly
	[[ $VFlagPytOnly  = "1" ]] && UpdatePythonOnly
	[[ $VFlagHelp     = "1" ]] && DisplayOptions
	[[ $VArgz        != "True" ]] && menu
}

### MAIN ###
[[ $1 = "-r" ]] && VFlagRegular=1  && VArgz="True"
[[ $1 = "-b" ]] && VFlagHomebrew=1 && VArgz="True"
[[ $1 = "-a" ]] && VFlagAptOnly=1  && VArgz="True"
[[ $1 = "-p" ]] && VFlagPytOnly=1  && VArgz="True"

[[ $1 = "-h" ]]     && VFlagHelp=1 && VArgz="True"
[[ $1 = "-help" ]]  && VFlagHelp=1 && VArgz="True"
[[ $1 = "--help" ]] && VFlagHelp=1 && VArgz="True"
main
